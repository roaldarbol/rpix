% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup_pixi.R
\name{setup_pixi}
\alias{setup_pixi}
\title{Setup pixi environment safely}
\usage{
setup_pixi(add_to_rprofile = TRUE, global = FALSE, init_if_missing = TRUE)
}
\arguments{
\item{add_to_rprofile}{Logical. If TRUE, adds the pixi library configuration
to .Rprofile for persistence across sessions. Default is FALSE.}

\item{global}{Logical. If TRUE and \code{add_to_rprofile = TRUE}, adds to global
~/.Rprofile instead of project-local .Rprofile. Default is FALSE.}

\item{init_if_missing}{Logical. If TRUE, runs \verb{pixi init} if pixi.toml is not
found. Default is TRUE.}
}
\value{
Invisibly returns a list with the status of each setup step.
}
\description{
\code{setup_pixi()} provides a complete pixi setup for R projects. It checks for
pixi availability, initializes a pixi project if needed, and configures R
to use pixi-managed packages. The function prioritizes safety and uses
.libPaths() instead of environment variables to avoid shared library conflicts.
}
\details{
The function performs the following steps:
\enumerate{
\item Checks if pixi is available in PATH (adds it if not found)
\item Checks for pixi.toml in project root (runs \verb{pixi init} if not found)
\item Configures R to use the pixi library as the primary package source
\item Optionally adds the configuration to .Rprofile for persistence
}

Instead of setting environment variables (which can cause shared library
conflicts), this function modifies .libPaths() to prioritize the pixi library.
}
\examples{
\dontrun{
# Basic setup - just configure for current session
setup_pixi()

# Full setup - add to .Rprofile for persistence
setup_pixi(add_to_rprofile = TRUE)

# Setup without auto-initializing pixi project
setup_pixi(init_if_missing = FALSE)
}

}
\seealso{
\code{\link[=pixi_to_path]{pixi_to_path()}}, \code{\link[=.libPaths]{.libPaths()}}
}
